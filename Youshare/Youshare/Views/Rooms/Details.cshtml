@model Youshare.Models.Rooms

@{
    ViewBag.Title = "Details";
}

<h2>@Model.Name</h2>

<div class="col-sm-12">
    <div class="col-sm-8">
        <div id="player"></div>

        <script>
      // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');
            var infolist = @Html.Raw(Json.Encode(ViewBag.Songqueue));
           
            var queue = [];
            queue = infolist;
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId:  "P_j-N4sRQwk",
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {

          event.target.playVideo()

      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.

      var done = false;
      function onPlayerStateChange(event) {
          if (event.data == YT.PlayerState.ENDED) {
              var nextsongs = queue;
              var next = function(){ var send = nextsongs[0];
                  for(var i = 0; i<nextsongs.length-1;i++){
              nextsongs[i] = nextsongs[i+1]
              
                  }
                  return send;

              }
              var nextsong = next();
              console.log(nextsong);
             event.target.loadVideoById(nextsong);
             event.target.playVideo(nextsong);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
        </script>
    </div>
    <div class="col-sm-4">
        <h2>Chat</h2>
        <div class="col-sm-12">
            <input type="text" id="message" />
            <input type="button" id="sendmessage" value="Send" />
            <input type="hidden" id="displayname" />
            <ul id="discussion"></ul>
        </div>
        @section scripts {
            <!--Script references. -->
            <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
            <!--Reference the SignalR library. -->
            <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
            <!--Reference the autogenerated SignalR hub script. -->
            <script src="~/signalr/Hubs"></script>
            <!--SignalR script to update the chat page and send messages.-->
            <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(@Context.Profile.UserName);
            // Set initial focus to message input box.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send( $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
            </script>
        }
    </div>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Name }) |
    @Html.ActionLink("Back to List", "Index")
</p>
